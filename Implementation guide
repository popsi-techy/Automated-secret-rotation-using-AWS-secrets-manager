Step-by-Step Guide:

1. Create a Secrets Manager Secret:

--Open the AWS Secrets Manager Console.
--Choose "Store a new secret."
--Choose secret type according to use (Here: Credentials for other database)
--Enter Credentials(User name & Password). These grant access to the database.
--For "Secret key/value," enter the root users and their initial passwords. 
For example:
{
  "users": {
    "root1": "initial_password_1",
    "root2": "initial_password_2"
  },
  "rotation_cycle_reset": false
}

--Select Dtabase according to use (Here: MySQL)
--Enter Server address; Database name and Port.
--Choose "Next"
--For "Secret name," enter a name like "prod/AppBeta/MySQL."
--Choose "Next"
--For instance keep "Configure automatic rotation" Disabled.
--Choose "Next".
--Configure any additional settings as needed.
--Review your settings.
--Choose "Next" and then "Store."

2. Configure Lambda Function:

--Go to AWS lambda console
--Create new function
--In code source Upload pythonLambdaFunction.zip file.
----Edit the lambda_function.py file present in zip file according to your credentials before uploading.
-- It is a Python Lambda function that rotates the MySQL root user passwords stored in Secrets Manager.
--Run and test the file.

3. Schedule Rotation with CloudWatch Events:

--Open the AWS CloudWatch Console.
--Choose "Rules" in the left navigation pane.
--Choose "Create Rule."
--For "Event Source," choose "Event Source Type" as "Event Source" and "Event Type" as "Scheduled."
--Set the schedule expression to cron(0 0 */40 * ? *) for every 40 days (Change days according to your need).
--For "Targets," add your Lambda function.

4. Configure SNS for Notifications:

--Open the Amazon SNS Console.
--Choose "Create topic."
--Enter a name and display name for your topic.
--Choose "Create topic."
--Copy the "Topic ARN" for later use.

5. IAM Role and Policies:

--Create an IAM role for your Lambda function with the necessary policies to read from Secrets Manager and publish to SNS.
--Attach the following policies:
----SecretsManagerReadWrite
----AWSLambdaBasicExecutionRole
----AmazonSNSFullAccess

**Note:
--Update the SNS topic ARN and other details in the Lambda function code.
--Test the entire setup in a controlled environment before deploying to production.

